@using Sandbox;
@using Sandbox.UI;
@inherits DropDown
@namespace LLMGame

@*                <option title="Anthropic Claude 3.5 Sonnet">anthropic/claude-3.5-sonnet</option>
                <option title="DeepSeek R1">deepseek/deepseek-r1</option>
                <option title="OpenAI GPT-4o mini">openai/gpt-4o-mini</option>
                <option title="Meta Llama 3.3 70B Instruct">meta-llama/llama-3.3-70b-instruct</option>
                <option title="DeepSeek R1 Distill Llama 70b">deepseek/deepseek-r1-distill-llama-70b</option>
                <option title="Perplexity Sonar Reasoning">perplexity/sonar-reasoning</option>
                <option title="OpenAI o1 (preview) (expensive)">openai/o1-preview</option>
                <option title="Meta Llama 3.1 8B Instruct">meta-llama/llama-3.1-8b-instruct</option
                <option title="Google Gemini Flash 1.5 8B">google/gemini-flash-1.5-8b</option>
                <option title="Google Gemini Flash 1.5">google/gemini-flash-1.5</option> *@
<root> 
</root>

@{
    PopulateDropDown();
}
@code
{

    bool Init = false;
    void PopulateDropDown() {
        Options.Clear();
        if (LLMScene.Instance.LanguageAPI is OpenRouterAPI openrouter)
        {
            Options.Add(new Option("Anthropic Claude 3.5 Sonnet", "anthropic/claude-3.5-sonnet"));
            Options.Add(new Option("DeepSeek R1", "deepseek/deepseek-r1"));
            Options.Add(new Option("DeepSeek R1 Distill Qwen 1.5B", "deepseek/deepseek-r1-distill-qwen-1.5b"));
            Options.Add(new Option("DeepSeek R1 Distill Llama 8B", "deepseek/deepseek-r1-distill-llama-8b"));
            Options.Add(new Option("DeepSeek R1 Distill Llama 70b", "deepseek/deepseek-r1-distill-llama-70b"));
            Options.Add(new Option("Meta Llama 3.2 1B Instruct", "meta-llama/llama-3.2-1b-instruct"));
            Options.Add(new Option("Meta Llama 3.1 8B Instruct", "meta-llama/llama-3.1-8b-instruct"));
            Options.Add(new Option("Meta Llama 3.3 70B Instruct", "meta-llama/llama-3.3-70b-instruct"));
            Options.Add(new Option("Google Gemini Flash 2.0", "google/gemini-2.0-flash-001"));
            Options.Add(new Option("Google Gemini Flash 1.5 8B", "google/gemini-flash-1.5-8b"));
            Options.Add(new Option("Google Gemini Flash 1.5", "google/gemini-flash-1.5"));
            Options.Add(new Option("OpenAI o3 Mini", "openai/o3-mini"));
            Options.Add(new Option("OpenAI o3 Mini High", "openai/o3-mini-high"));
            Options.Add(new Option("OpenAI GPT-4o mini", "openai/gpt-4o-mini"));
            Options.Add(new Option("OpenAI o1 (preview) (expensive)", "openai/o1-preview"));
            Options.Add(new Option("AionLabs: Aion-1.0", "aion-labs/aion-1.0"));
            Options.Add(new Option("AionLabs: Aion-1.0-Mini", "aion-labs/aion-1.0-mini"));
            Options.Add(new Option("Perplexity Sonar Reasoning", "perplexity/sonar-reasoning"));
            Options.Add(new Option("Mistal Small 3", "mistralai/mistral-small-24b-instruct-2501"));
        }
        if (LLMScene.Instance.LanguageAPI is GroqAPI groq)
        {
            Options.Add(new Option("DeepSeek R1 Distill Llama 70b", "deepseek-r1-distill-llama-70b"));
            Options.Add(new Option("Google Gemma 9B", "gemma2-9b-it"));
            Options.Add(new Option("Meta Llama 3.2 90B Vision", "llama-3.2-90b-vision-preview"));
        }
        
        if (Selected == null || !Init || LLMScene.Instance.LanguageAPI.Model == "null" )
        {
            var opt = Options.FirstOrDefault();
            Select(opt);
            Init = true;
        }
    }
    protected override void OnAfterTreeRender(bool firstTime)
    {
        if (firstTime)
        {
            PopulateDropDown();
            var opt = Options.FirstOrDefault();
            Select(opt);
            Init = true;
        }
        base.OnAfterTreeRender(firstTime);
    }
    protected override void Select(Option option, bool triggerChange = true)
    {
        base.Select(option, triggerChange); 
        LLMScene.Instance.LanguageAPI.Model = (string)option.Value;
        Log.Info($"Swapped to {LLMScene.Instance.LanguageAPI.Model}");
    } 
    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(Selected);
}
