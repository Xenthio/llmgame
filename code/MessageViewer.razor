@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace LLMGame

<root>
    @if (AskingForPrompt)
    {
        <div class="promptentry">
            <div class="title">Enter a prompt</div>
            <TextEntry @ref=textEntry Placeholder="a lovely park"/>
            <div class="title">Model</div>
            <select @ref=dropDown default="anthropic/claude-3.5-sonnet">
                <option title="Anthropic Claude 3.5 Sonnet">anthropic/claude-3.5-sonnet</option>
                <option title="DeepSeek R1">deepseek/deepseek-r1</option>
                <option title="OpenAI GPT-4o mini">openai/gpt-4o-mini</option>
                <option title="Meta Llama 3.3 70B Instruct">meta-llama/llama-3.3-70b-instruct</option>
                <option title="DeepSeek R1 Distill Llama 70b">deepseek/deepseek-r1-distill-llama-70b</option>
                <option title="Perplexity Sonar Reasoning">perplexity/sonar-reasoning</option>
                <option title="OpenAI o1 (preview) (expensive)">openai/o1-preview</option>
            </select>
            @{
                if (dropDown.Selected == null)
                {
                    var opt = dropDown.Options.FirstOrDefault();
                    dropDown.Selected = opt;
                }
            }
            <button onclick=@Submit>Submit</button>
        </div>
    }
    <div class="messagelist">
        @foreach (var message in LanguageModel.Instance.Messages)
        {
            <div class="message">
                <div class="title">@message.role</div>
                <div class="content">@message.content</div>
            </div>
        }
    </div>
</root>

@code
{
    bool AskingForPrompt = true;
    public TextEntry textEntry { get; set; }
    public DropDown dropDown { get; set; }

    public void Submit()
    {
        LanguageModel.Instance.Model = (string)dropDown.Selected.Value;
        Log.Info(LanguageModel.Instance.Model);
        EnvironmentMaker.Instance.AddEnvironment(textEntry.Value);
        AskingForPrompt = false;
    }

    protected override void OnFixedUpdate()
    {
        if (Input.Down("Score") || AskingForPrompt)
        {
            this.Panel.Style.PointerEvents = Sandbox.UI.PointerEvents.All;
        }
        else
        {
            this.Panel.Style.PointerEvents = Sandbox.UI.PointerEvents.None;
        }
        base.OnFixedUpdate();
    }
    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(LanguageModel.Instance.Messages.Count);
}
